input:
  edges:
    signal: [SigChecker]
    entry: [Entry_SemaphoreJoin.secondary]
    follows: [Follows_EntryJoin.secondary]
    target: [Switch_SwitchPositionJoin.primary]
    position: [Switch_SwitchPositionJoin.secondary]
    currentPosition: [SwitchPosition_CurrentPositionJoin.secondary]

nodes:
  - SigChecker:
      type: Checker
      condition: '(cs) => cs(1) == "SIGNAL_GO"'
      next: [LeftTrimmer]
  - LeftTrimmer:
      type: Trimmer
      selectionVector: Vector(0)
      next: [Entry_SemaphoreJoin.primary]
  - Entry_SemaphoreJoin:
      type: HashJoiner
      primaryLength: 1
      primarySelector: Vector(0)
      secondaryLength: 2
      secondarySelector: Vector(1)
      next: [Follows_EntryJoin.primary]
  - Follows_EntryJoin:
      type: HashJoiner
      primaryLength: 2
      primarySelector: Vector(1)
      secondaryLength: 2
      secondarySelector: Vector(0)
      next: [FinalJoin.primary]
  - Switch_SwitchPositionJoin:
      type: HashJoiner
      primaryLength: 2
      primarySelector: Vector(0)
      secondaryLength: 2
      secondarySelector: Vector(0)
      next: [SwitchPosition_CurrentPositionJoin.primary]
  - SwitchPosition_CurrentPositionJoin:
      type: HashJoiner
      primaryLength: 2
      primarySelector: Vector(1)
      secondaryLength: 2
      secondarySelector: Vector(0)
      next: [Ineq]
  - Ineq:
      type: Inequality
      nodeIndex: 2
      inequals: Vector(3)
      next: [FinalJoin.secondary]
  - FinalJoin:
      type: HashJoiner
      primaryLength: 3
      primarySelector: Vector(2)
      secondaryLength: 4
      secondarySelector: Vector(0)
      next: [production]
