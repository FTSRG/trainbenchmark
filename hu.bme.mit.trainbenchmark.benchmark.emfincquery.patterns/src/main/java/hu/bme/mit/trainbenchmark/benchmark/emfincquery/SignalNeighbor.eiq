package hu.bme.mit.trainbenchmark.benchmark.emfincquery

import "http://www.semanticweb.org/ontologies/2011/1/TrainRequirementOntology.owl" 

pattern SignalNeighbor(R1)
{
	find exitSignalSensor(SigA, R1, Sen1A);
	find connectingSensors(Sen1A, Sen2A);
	find rDefinition(R3A, Sen2A);
	R3A != R1;
	neg find entrySignalSensor(SigA, _R2A, Sen2A);
}
	
pattern exitSignalSensor(Sig, R1, Sen1)
{
	find exitSignal(R1, Sig);
	find rDefinition(R1, Sen1);
}
	
pattern entrySignalSensor(Sig, R2, Sen2)
{
	find entrySignal(R2, Sig);
	find rDefinition(R2, Sen2);
}
	
pattern entrySignal(R, Sig)
{
	Route(R);
	Signal(Sig);
	Route.Route_entry(R, Sig);
}

pattern exitSignal(R, Sig)
{
	Route(R);
	Signal(Sig);
	Route.Route_exit(R, Sig);
}
	
pattern rDefinition(R, Sen)
{
	Route(R);
	Sensor(Sen);
	Route.Route_routeDefinition(R, Sen);
}
	
pattern connectingSensors(Sen1, Sen2)
{
	find sensorTrackElement(Sen1, Te1);
	find sensorTrackElement(Sen2, Te2);
	find trackelementConnected(Te1, Te2);
}
	
pattern trackelementConnected(Te1, Te2)
{
	TrackElement(Te1);
	TrackElement(Te2);
	TrackElement.TrackElement_connectsTo(Te1, Te2);
}
	
	
pattern sensorTrackElement(Sen, Te)
{
	Sensor(Sen);
	TrackElement(Te);
	Sensor.Sensor_trackElement(Sen, Te);
}

/*
pattern Iq4SignalNeighbor(R1)
{
	Route.Route_exit(R1, SigA);
	Route.Route_routeDefinition(R1, Sen1A);
	
	Sensor.Sensor_trackElement(Sen1A, Te1);
	Sensor.Sensor_trackElement(Sen2A, Te2);
	TrackElement.TrackElement_connectsTo(Te1, Te2);
	
	Route.Route_routeDefinition(R3A, Sen2A);
	
	R3A != R1;
		
	neg find Iq4entrySignalSensor(SigA, _R2A, Sen2A);
}
	
	
pattern Iq4entrySignalSensor(Sig, R2, Sen2)
{
	Route.Route_entry(R2, Sig);
	Route.Route_routeDefinition(R2, Sen2);
}

pattern Iq4exitSignalSensor(Sig, R1, Sen1)
{
	Route.Route_exit(R1, Sig);
	Route.Route_routeDefinition(R1, Sen1);
}
*/
